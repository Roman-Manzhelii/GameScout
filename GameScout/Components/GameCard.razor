@using GameScout.Domain.Models
@inject GameScout.State.AppState State

@if (Game is not null)
{
        <article class="card game-card">
        <img class="cover"
             src="@(!string.IsNullOrWhiteSpace(Game?.Image) ? Game.Image : "/no-image.jpeg")"
             onerror="this.onerror=null;this.src='/no-image.jpeg';"
             alt="@Game?.Name"
             loading="lazy" />
            <div class="card-body">
                <div class="title">@Game!.Name</div>

                <div class="actions">
                    <a class="btn" href="/GameDetails/@Game!.Id">Details</a>
                    <button class="btn @(inBacklog ? "btn-remove" : "btn-add")"
                            @onclick="Toggle">
                        @(inBacklog ? "Remove" : "Add")
                    </button>
                </div>
            </div>
        </article>
}

@code {
    [Parameter] public GameSummary? Game { get; set; }
    private bool inBacklog;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || Game is null) return;
        inBacklog = await State.ContainsAsync(Game.Id);
        StateHasChanged();
    }

    private async Task Toggle()
    {
        if (Game is null) return;
        await State.ToggleAsync(Game);
        inBacklog = await State.ContainsAsync(Game.Id);
        StateHasChanged();
    }
}
