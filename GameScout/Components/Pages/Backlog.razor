@page "/backlog"
@rendermode InteractiveServer
@using GameScout.Domain.Models
@inject GameScout.State.AppState State
@inject GameScout.Services.Abstractions.IGameCatalogService Catalog
@inject IJSRuntime JS

<PageTitle>Backlog</PageTitle>

<section class="stack">
    <h2 class="page-heading">Backlog</h2>

    @if (_loading)
    {
        <div class="empty">Loading…</div>
    }
    else if (State.Backlog.Count == 0)
    {
        <div class="empty">Your backlog is empty.</div>
    }
    else
    {
        <div class="cards-masonry">
            @foreach (var item in State.Backlog)
            {
                <article class="card game-card">
                    <img class="cover"
                         src="@(!string.IsNullOrWhiteSpace(item.Image) ? item.Image : "/no-image.jpeg")"
                         onerror="this.onerror=null;this.src='/no-image.jpeg';"
                         alt="@item.Name"
                         />

                    <div class="card-body">
                        <div class="title clamp-2">@item.Name</div>

                        <div class="actions">
                            <a class="btn" href="/GameDetails/@item.GameId">Details</a>
                            <button class="btn btn-remove" @onclick="() => Remove(item)">Remove</button>
                        </div>
                    </div>
                </article>
            }
        </div>
    }
</section>

@code {
    private bool _loading;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        _loading = true; StateHasChanged();

        await State.EnsureLoadedAsync();

        const int MAX_BACKFILL = 6;
        var missing = State.Backlog.Where(x => string.IsNullOrEmpty(x.Image)).Take(MAX_BACKFILL).ToList();
        if (missing.Count > 0)
        {
            foreach (var it in missing)
            {
                try
                {
                    var details = await Catalog.GetDetailsAsync(it.GameId);
                    it.Image = details?.Screenshots?.FirstOrDefault();
                }
                catch {}
            }
            await State.SaveAsync();
        }

        _loading = false; StateHasChanged();
    }

    private async Task Remove(SavedItem it)
    {
        var ok = await JS.InvokeAsync<bool>("confirm", $"Remove «{it.Name}» from Backlog?");
        if (!ok) return;

        await State.ToggleAsync(it.GameId, it.Name, it.Image);
        StateHasChanged();
    }
}
