@page "/backlog"
@rendermode InteractiveServer
@using GameScout.Domain.Models
@inject GameScout.State.AppState State
@inject GameScout.Services.Abstractions.IGameCatalogService Catalog

<PageTitle>Backlog</PageTitle>

<h3>Backlog</h3>

@if (_loading)
{
    <p>Loading...</p>
}
else if (State.Backlog.Count == 0)
{
    <p>Empty.</p>
}
else
{
    @foreach (var item in State.Backlog)
    {
        <div class="card">
            <div class="card-body">
                <img src="@item.Image"
                     alt="@item.Name"
                     loading="lazy"
                     hidden="@string.IsNullOrEmpty(item.Image)" />

                <div>
                    <a href="/GameDetails/@item.GameId">
                        @item.Name
                    </a>
                    <button @onclick="() => Remove(item)">Remove</button>
                </div>
            </div>
        </div>
    }
}

@code {
    private bool _loading;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        _loading = true; StateHasChanged();

        await State.EnsureLoadedAsync();

        const int MAX_BACKFILL = 6;
        var missing = State.Backlog.Where(x => string.IsNullOrEmpty(x.Image)).Take(MAX_BACKFILL).ToList();
        if (missing.Count > 0)
        {
            foreach (var it in missing)
            {
                try
                {
                    var details = await Catalog.GetDetailsAsync(it.GameId);
                    it.Image = details?.Screenshots?.FirstOrDefault();
                }
                catch {}
            }
            await State.SaveAsync();
        }

        _loading = false; StateHasChanged();
    }

    private async Task Remove(SavedItem it)
    {
        await State.ToggleAsync(it.GameId, it.Name, it.Image);
        StateHasChanged();
    }
}
