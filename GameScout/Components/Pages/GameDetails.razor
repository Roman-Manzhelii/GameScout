@page "/GameDetails/{id:int}"
@rendermode InteractiveServer
@inject IGameCatalogService Catalog
@inject IDealsService DealsService
@using GameDetailsModel = GameScout.Domain.Models.GameDetails
@using DealModel = GameScout.Domain.Models.Deal

<h3>Game details</h3>

@if (_loading)
{
    <p>Loading...</p>
}
else if (_details is null)
{

    <p>No details</p>
}
else
{
    <h4>@_details.Name</h4>
    @if (_details.Metacritic is int mc)
    {
        <p>Metacritic: @mc</p>
    }
    @if (_details.Platforms?.Count > 0)
    {
        <p>Platforms: @string.Join(", ", _details.Platforms)</p>
    }
    @if (_details.Genres?.Count > 0)
    {
        <p>Genres: @string.Join(", ", _details.Genres)</p>
    }
    <p class="mb-3" style="white-space:pre-wrap">@_details.Description</p>

    @if (_details.Screenshots?.Count > 0)
    {
        <div class="d-flex flex-wrap gap-2">
            @foreach (var s in _details.Screenshots.Take(6))
            {
                <img src="@s" style="max-width:240px;height:auto" alt="screenshot" loading="lazy" />
            }
        </div>
    }

    <h5 class="mt-3">Deals</h5>
    @if (_deals.Count == 0)
    {
        <p>No deals.</p>
    }
    else
    {
        @foreach (var d in _deals)
        {
            <DealCard Deal="d" />
        }
    }
}

@code {
    [Parameter] public int id { get; set; }
    private GameDetailsModel? _details;
    private readonly List<DealModel> _deals = new();
    private bool _loading;

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;
        _details = await Catalog.GetDetailsAsync(id);
        _deals.Clear();
        if (!string.IsNullOrWhiteSpace(_details?.Name))
        {
            var deals = await DealsService.GetDealsByTitleAsync(_details.Name);
            _deals.AddRange(deals);
        }
        _loading = false;
    }
}
