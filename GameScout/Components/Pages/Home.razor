@page "/"
@rendermode InteractiveServer
@inject IGameCatalogService Catalog
@using GameScout.Domain.Models
@using GameScout.Domain.Enums
@using Microsoft.AspNetCore.Components
@inject GameScout.State.AppState State

<PageTitle>GameScout</PageTitle>

<h3>Search games</h3>
<SearchBar @bind-Text="_query" OnSearch="OnSearchClicked" Busy="_loading" />

<div class="mt-2">
    <label class="form-label">Sort</label>
    <InputSelect class="form-select" @bind-Value="_sort" TValue="SortBy">
        <option value="@SortBy.Metacritic">Metacritic</option>
        <option value="@SortBy.Rating">Rating</option>
        <option value="@SortBy.ReleaseDate">Released</option>
        <option value="@SortBy.Name">Name</option>
    </InputSelect>
</div>

@if (_loading)
{
    <p>Loading...</p>
}
else if (!State.HasSearch)
{
    <p>No results.</p>
}
else
{
    <p>Found @State.SearchTotal result(s).</p>

    @foreach (var g in State.SearchItems)
    {
        <GameCard Game="g" />
    }
}

@code {
    private string _query = "";
    private SortBy _sort = SortBy.Metacritic;
    private int _page = 1;
    private int _pageSize = 20;
    private bool _loading;

    protected override void OnInitialized()
    {
        if (State.HasSearch)
        {
            _query = State.SearchQuery ?? _query;
            _sort = State.SearchSort;
            _page = State.SearchPage;
            _pageSize = State.SearchPageSize;
        }
    }

    private async Task OnSearchClicked()
    {
        var q = _query?.Trim();
        if (string.IsNullOrEmpty(q)) return;

        _loading = true;
        StateHasChanged();

        var (items, total) = await Catalog.SearchAsync(
            q,
            platforms: null,
            genres: null,
            page: _page,
            pageSize: _pageSize,
            sort: _sort);

        State.SetSearchResults(q, items, total, _sort, _page, _pageSize);

        _loading = false;
    }
}
