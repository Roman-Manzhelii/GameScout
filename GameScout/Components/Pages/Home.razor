@page "/"
@rendermode InteractiveServer
@inject IGameCatalogService Catalog
@inject NavigationManager Nav
@using GameScout.Domain.Models
@using GameScout.Domain.Enums
@using GameScout.Services.Http
@using Microsoft.AspNetCore.Components
@inject GameScout.State.AppState State

<PageTitle>GameScout</PageTitle>

<h3 id="page-heading" class="page-heading">Search games</h3>

<SearchBar @bind-Text="_query" OnSearch="OnSearchClicked" Busy="_loading" />


@if (_loading)
{
    <p>Loading...</p>
}
else if (State.SearchQuery is null)
{
}
else if (State.SearchItems is null || State.SearchItems.Count == 0)
{
    <div class="empty">No results.</div>
}
else
{
    <p>Found @State.SearchTotal result(s).</p>

    <div class="cards-masonry">
        @foreach (var g in State.SearchItems)
        {
        <GameCard Game="g" />
        }
    </div>

    @if (State.SearchTotal > _pageSize)
    {
        <Pager Page="@_page" PageSize="@_pageSize" Total="@State.SearchTotal" OnChange="GoToPage" />
    }
}

@code {
    private string _query = "";
    private SortBy _sort = SortBy.Metacritic;
    private int _page = 1;
    private int _pageSize = 20;
    private bool _loading;

    protected override void OnInitialized()
    {
        if (State.HasSearch)
        {
            _query = State.SearchQuery ?? _query;
            _sort = State.SearchSort;
            _page = State.SearchPage;
            _pageSize = State.SearchPageSize;
        }
    }

    @* Ref: Trigger search on Enter via SearchBar (onkeydown) *@
        private async Task OnSearchClicked()
    {
        var q = _query?.Trim();
        if (string.IsNullOrEmpty(q)) return;
        _page = 1;
        await LoadPage(_page, q, _sort);
    }

    private Task GoToPage(int page) => LoadPage(page, _query, _sort);

    private async Task LoadPage(int page, string query, SortBy sort)
    {
        @* Ref: Navigate to /404 on network errors (ErrorBoundary guidance)
           https://learn.microsoft.com/aspnet/core/blazor/fundamentals/handle-errors *@
        try
        {
            _loading = true;
            StateHasChanged();

            var (items, total) = await Catalog.SearchAsync(
                query,
                platforms: null,
                genres: null,
                page: page,
                pageSize: _pageSize,
                sort: sort);

            _page = page;
            State.SetSearchResults(query, items, total, sort, _page, _pageSize);

            _loading = false;
        }
        catch (NetworkUnavailableException)
        {
            Nav.NavigateTo("/404", true);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }
}
