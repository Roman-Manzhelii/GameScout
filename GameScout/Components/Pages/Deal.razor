@page "/deals"
@rendermode InteractiveServer
@inject NavigationManager Nav
@using DealModel = GameScout.Domain.Models.Deal
@using GameScout.Services.Http
@inject GameScout.Services.Abstractions.IDealsService Deals

<PageTitle>Hot Deals</PageTitle>

<h3 id="page-heading" class="page-heading">Hot Deals</h3>

@if (_loading && _pageItems.Count == 0)
{
    <div class="empty">Loading...</div>
}
else if (_all.Count == 0)
{
    <div class="empty">No deals.</div>
}
else
{
    <div class="cards-masonry">
        @foreach (var d in _pageItems)
        {
            <DealCard Deal="d" />
        }
    </div>

    @if (_all.Count > _pageSize)
    {
        <Pager Page="@_page" PageSize="@_pageSize" Total="@_all.Count" OnChange="GoToPage" />
    }
}

@code {
    private bool _loading;
    private readonly List<DealModel> _all = new();
    private List<DealModel> _pageItems = new();
    private int _page = 1;
    private int _pageSize = 12;

    @* Ref: Load and slice top deals; navigate to /404 on network errors *@
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (!firstRender) return;

            _loading = true;
            StateHasChanged();

            var top = await Deals.GetTopDealsAsync();

            _all.Clear();
            _all.AddRange(
                top.Where(d => d.Savings >= 40m)
                   .OrderByDescending(d => d.Savings)
                   .ThenBy(d => d.Price)
            );

            Slice();
        }
        catch (NetworkUnavailableException)
        {
            Nav.NavigateTo("/404", true);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private Task GoToPage(int page)
    {
        _page = page;
        Slice();
        return Task.CompletedTask;
    }

    private void Slice()
    {
        _pageItems = _all.Skip((_page - 1) * _pageSize).Take(_pageSize).ToList();
    }
}
